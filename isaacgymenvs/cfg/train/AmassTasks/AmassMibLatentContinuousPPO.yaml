params:
  seed: ${...seed}

  algo:
    name: latent_continuous_agent

  model:
    name: common_continuous_model

  network:
    name: common
    separate: True

    space:
      continuous:
        mu_activation: None
        sigma_activation: None
        mu_init:
          name: default
        sigma_init:
          name: const_initializer
          val: -3.2 # 0.04 in sigma
        fixed_sigma: True
        learn_sigma: False

    mlp:
      units: [3096, 2048, 1024]
      activation: swish
      d2rl: False

      initializer:
        name: default
      regularizer:
        name: None

  load_checkpoint: ${if:${...checkpoint},True,False} # flag which sets whether to load the checkpoint
  load_path: ${...checkpoint} # path to the checkpoint to load
  load_pretrained: ${if:${...pretrained},True,False} # flag which sets whether to load the checkpoint
  load_pretrained_path: ${...pretrained} # path to the checkpoint to load
  use_latent_expert: ${resolve_default:False,${...latent_expert}}
  use_amp: ${resolve_default:False,${...use_amp}}

  config:
    name: ${resolve_default:HumanoidAMP,${....experiment}}
    full_experiment_name: ${.name}
    env_name: rlgpu
    ppo: True
    multi_gpu: ${....multi_gpu}
    mixed_precision: False
    normalize_input: True
    normalize_value: True
    value_bootstrap: True
    num_actors: ${....task.env.numEnvs}
    reward_shaper:
      scale_value: 1
    normalize_advantage: True
    gamma: 0.99
    tau: 0.95
    learning_rate: 5e-5
    lr_schedule: constant
    kl_threshold: 0.008
    score_to_win: 20000
    max_epochs: ${resolve_default:200000,${....max_iterations}}
    save_best_after: 100
    save_frequency: 5000
    print_stats: True
    grad_norm: 1.0
    entropy_coef: 0.01
    truncate_grads: True # False
    e_clip: 0.2
    horizon_length: 16
    minibatch_size: 16384
    mini_epochs: 6
    critic_coef: 5
    clip_value: False
    seq_length: 4
    bounds_loss_coef: 10
    # prioritized sampling
    prioritized_sampling: ${resolve_default:False,${....prioritized_sampling}}

    # actor optim
    actor_learning_rate: ${resolve_default:2e-4,${....actor_learning_rate}}
    
    # amp setting
    disc_reward_scale: 2
    task_reward_w: 0.5
    disc_reward_w: 0.5

    # decoder noise or not
    decoder_noise: ${resolve_default:False,${....decoder_noise}}

    # for test only
    eval_jitter: ${resolve_default:False, ${....eval_jitter}}
