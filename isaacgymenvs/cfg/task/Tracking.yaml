# used to create the object
name: HumanoidTracking

physics_engine: ${..physics_engine}

# if given, will override the device setting in gym.
env: 
  test: ${resolve_default:False, ${...test}}
  low_memory_load: ${resolve_default:False, ${...low_memory_load}}
  target_episodes: ${resolve_default:[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],${...target_episodes}} # visualization
  num_track_points: ${resolve_default:1,${...num_track_points}} # tracker
  tilted: ${resolve_default:True,${...tilted}} # tracker
  noise_scale: ${resolve_default:0.0, ${...noise_scale}}
  displayReference: ${resolve_default:True, ${...display_reference}}
  white_mode: ${resolve_default:False, ${...white_mode}}
  eval_metric: ${resolve_default:False, ${...eval_metric}}
  numEnvs: ${resolve_default:8192,${...num_envs}}
  seed: ${resolve_default:42,${...seed}}
  envSpacing: 5 # (prior_viz)
  episodeLength: ${resolve_default:150,${...episode_length}}
  cameraFollow: ${resolve_default:True, ${...camera_follow}} # if the camera follows humanoid or not
  enableDebugVis: False

  # visualization
  body_separation_viz: ${resolve_default:"total",${...body_separation_viz}}

  # evals
  kinematic: ${resolve_default:False, ${...kinematic}}
  motion_matching: ${resolve_default:False, ${...motion_matching}}
  prior_rollout: ${resolve_default:False, ${...prior_rollout}}
  
  pdControl: True
  setEffortLimit : ${resolve_default:False,${...set_effort_limit}} 
  powerScale: 1.0
  controlFrequencyInv: 4 # 30 Hz
  stateInit: "Random"
  hybridInitProb: 0.5
  numNextObsSteps: ${resolve_default:5, ${...next_obs_steps}}
  numAMPObsSteps: 2

  localRootObs: True
  contactBodies: ["right_foot", "left_foot"]
  terminationHeight: 0.5
  enableEarlyTermination: ${resolve_default:True, ${...enable_et}}
  PositionalEncoding: ${resolve_default:'time', ${...positional_encoding}}

  # animation files to learn from
  # these motions should use hyperparameters from HumanoidAMPPPO.yaml

  # motion file shoud be either single numpy file or list of numpy files or directory
  # case 1 > motion_file : "samples/amp_humanoid_walk.npy"
  # case 2 > motion_file : ["samples/amp_humanoid_walk.npy", "samples/amp_humanoid_dance.npy"]
  motion_file: ${resolve_default:"LaFAN1",${...motion_dataset}}
  energyRewCoef: ${resolve_default:0.0,${...energy_rew_coef}}


  asset:
    assetFileName: "mjcf/amp_humanoid.xml"

  plane:
    staticFriction: 1.0
    dynamicFriction: 1.0
    restitution: 0.0
  
  imitationRewStyle: ${resolve_default:"simple_track", ${...imitation_rew_style}}
  imitationResetStyle: ${resolve_default:"track_dist_1.5", ${...imitation_reset_style}}

sim:
  dt: 0.0083 # 1/120 s
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 0
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 10.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 2 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (broken - do not use!)

task:
  randomize: False
  randomization_params:
    # specify which attributes to randomize for each actor type and property
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params: 
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      humanoid:
        color: True
        rigid_body_properties:
          mass: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness: 
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000


